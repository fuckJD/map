{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MyMapComponent","withScriptjs","withGoogleMap","props","points","data","length","map","item","google","maps","LatLng","location","lat","lng","react_default","a","createElement","lib","defaultZoom","defaultCenter","mapTypeId","HeatmapLayer_default","App","e","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","autor","describe","_this2","axios","get","then","res","list","console","log","setState","className","googleMapURL","loadingElement","style","height","containerElement","mapElement","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mUAOMA,EAAiBC,uBAAaC,wBAAc,SAACC,GAC/C,IAAIC,EAAS,GAMb,OALID,EAAME,KAAKC,OAAS,IACtBF,EAASD,EAAME,KAAKE,IAAI,SAACC,GACvB,OAAO,IAAIC,OAAOC,KAAKC,OAAOH,EAAKI,SAASC,IAAKL,EAAKI,SAASE,QAIjEC,EAAAC,EAAAC,cAACC,EAAA,UAAD,CACEC,YAAa,EACbC,cAAe,CAAEP,IAAK,WAAYC,IAAK,aACvCO,UAAW,UAEXN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEX,KAAMD,QAmDDmB,cA3Cb,SAAAA,EAAaC,GAAG,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACX5B,OAAQ,CACN,CACE6B,MAAS,GACTC,SAAY,GACZtB,SAAY,CACVC,IAAO,WACPC,IAAO,gBATDW,mFAgBK,IAAAU,EAAAP,KACnBQ,IAAMC,IACJ,sBAECC,KAAK,SAAAC,GACJ,IAAMnC,EAASmC,EAAIlC,KAAKmC,KACxBC,QAAQC,IAAItC,GACZ+B,EAAKQ,SAAS,CAAEH,KAAMpC,uCAK1B,OACEW,EAAAC,EAAAC,cAAA,OAAK2B,UAAU,OACb7B,EAAAC,EAAAC,cAACjB,EAAD,CACE6C,aAAa,8GACbxC,KAAMuB,KAAKI,MAAMQ,KACjBM,eAAgB/B,EAAAC,EAAAC,cAAA,OAAK8B,MAAO,CAAEC,OAAM,UACpCC,iBAAkBlC,EAAAC,EAAAC,cAAA,OAAK8B,MAAO,CAAEC,OAAM,YACtCE,WAAYnC,EAAAC,EAAAC,cAAA,OAAK8B,MAAO,CAAEC,OAAM,oBApCxBG,aChBEC,QACW,cAA7BC,OAAOzC,SAAS0C,UAEe,UAA7BD,OAAOzC,SAAS0C,UAEhBD,OAAOzC,SAAS0C,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.870897c2.chunk.js","sourcesContent":["/* eslint-disable no-undef */\nimport React, { Component } from 'react'\nimport './App.css'\nimport { withScriptjs, withGoogleMap, GoogleMap } from 'react-google-maps'\nimport HeatmapLayer from 'react-google-maps/lib/components/visualization/HeatmapLayer'\nimport axios from 'axios'\n\nconst MyMapComponent = withScriptjs(withGoogleMap((props) => {\n    let points = []\n    if (props.data.length > 0) {\n      points = props.data.map((item) => {\n        return new google.maps.LatLng(item.location.lat, item.location.lng)\n      })\n    }\n    return (\n      <GoogleMap\n        defaultZoom={5}\n        defaultCenter={{ lat: 39.8401204, lng: 116.5900514 }}\n        mapTypeId={'hybrid'}\n      >\n        <HeatmapLayer\n          data={points}\n        ></HeatmapLayer>\n      </GoogleMap>\n    )\n  }\n))\n\nclass App extends Component {\n  constructor (e) {\n    super(e)\n    this.state = {\n      points: [\n        {\n          'autor': '',\n          'describe': '',\n          'location': {\n            'lat': 39.8401204,\n            'lng': 116.5900514\n          }\n        }\n      ]\n    }\n  }\n\n  componentDidMount () {\n    axios.get(\n      './data/points.json'\n    )\n      .then(res => {\n        const points = res.data.list\n        console.log(points)\n        this.setState({ list: points })\n      })\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <MyMapComponent\n          googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyA8f78kK64cbZIt1C23qW5bH0-iUbSi2bM&libraries=visualization\"\n          data={this.state.list}\n          loadingElement={<div style={{ height: `100%` }}/>}\n          containerElement={<div style={{ height: `1000px` }}/>}\n          mapElement={<div style={{ height: `100%` }}/>}\n        >\n        </MyMapComponent>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}